buildscript {
    ext.kotlin_version = '1.2.50'
    ext.corda_release_version = '3.0.0-RC04'
    ext.typesafe_config_version = '1.3.1'


    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url 'https://dl.bintray.com/kotlin/kotlin-eap/'
        }
        maven {
            url "https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases"
        }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.10.RELEASE'
    id 'com.palantir.docker' version '0.19.1'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url 'https://dl.bintray.com/kotlin/kotlin-eap/'
    }
    maven {
        url "https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases"
    }

    maven { url 'https://jitpack.io' }
}

group = "net.corda"
version = "0.1-SNAPSHOT"

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'kotlin-noarg'
apply plugin: 'com.palantir.docker'

ext {
    spring_version = '1.5.10.RELEASE'
}

configurations {
    notaryRuntime
    notaryRuntime.transitive = false
}

dependencies {
    // Spring boot dependencies
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: spring_version
    compile group: 'com.r3.corda', name: 'corda-node-api', version: corda_release_version
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.21.0.1'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: "com.typesafe", name: "config", version: typesafe_config_version
    notaryRuntime group: 'com.r3.corda', name: 'corda', version: corda_release_version
    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        apiVersion = "1.2"
        languageVersion = "1.2"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

task copyCordaJar() {
    def cordaJarName = file(project.configurations.notaryRuntime.first()).name
    copy {
        from project.configurations.notaryRuntime.first()
        into "${buildDir}"
    }
    file("${buildDir}/${cordaJarName}").renameTo("${buildDir}/corda.jar")
}


task copyNetworkMapJar() {
    def networkMapJarName = file(jar.archivePath).name
    copy {
        from jar.archivePath
        into "${buildDir}"
    }
    file("${buildDir}/${networkMapJarName}").renameTo("${buildDir}/app.jar")
}


docker {
    files 'src/main/shell/start.sh', 'src/main/resources/notary/node.conf', "${buildDir}/corda.jar", "${buildDir}/app.jar"
    name "roastario/notary-and-network-map:" + "${corda_release_version.toLowerCase()}"
    noCache true
}

tasks.dockerPrepare.dependsOn(build, jar, copyCordaJar, copyNetworkMapJar)